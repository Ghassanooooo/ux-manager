{"version":3,"sources":["../node_modules/semantic-ui-react/dist/es/views/Card/CardDescription.js","../node_modules/semantic-ui-react/dist/es/views/Card/CardHeader.js","../node_modules/semantic-ui-react/dist/es/views/Card/CardMeta.js","../node_modules/semantic-ui-react/dist/es/views/Card/CardContent.js","../node_modules/semantic-ui-react/dist/es/views/Card/CardGroup.js","../node_modules/semantic-ui-react/dist/es/views/Card/Card.js","components/Components/Cards/SimpleCard/SimpleCard.jsx"],"names":["CardDescription","props","children","className","content","textAlign","classes","rest","getUnhandledProps","ElementType","getElementType","createElement","isNil","handledProps","propTypes","CardHeader","CardMeta","CardContent","description","extra","header","meta","val","autoGenerateKey","CardGroup","centered","doubling","items","itemsPerRow","stackable","itemsJSX","item","key","join","_Component","Card","_getPrototypeOf2","_this","this","_len","arguments","length","args","Array","_key","call","apply","concat","e","onClick","value","_this$props","color","fluid","href","image","link","raised","handleClick","Image","create","defaultProps","ui","wrapped","SimpleCard","data","title"],"mappings":"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","file":"static/js/19.b29f01b0.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain a description with one or more paragraphs.\n */\n\nfunction CardDescription(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'description', className);\n  var rest = getUnhandledProps(CardDescription, props);\n  var ElementType = getElementType(CardDescription, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardDescription.handledProps = [\"as\", \"children\", \"className\", \"content\", \"textAlign\"];\nCardDescription.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A card content can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardDescription;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain a header.\n */\n\nfunction CardHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'header', className);\n  var rest = getUnhandledProps(CardHeader, props);\n  var ElementType = getElementType(CardHeader, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardHeader.handledProps = [\"as\", \"children\", \"className\", \"content\", \"textAlign\"];\nCardHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A card header can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardHeader;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain content metadata.\n */\n\nfunction CardMeta(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'meta', className);\n  var rest = getUnhandledProps(CardMeta, props);\n  var ElementType = getElementType(CardMeta, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardMeta.handledProps = [\"as\", \"children\", \"className\", \"content\", \"textAlign\"];\nCardMeta.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A card meta can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardMeta;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\nimport CardDescription from './CardDescription';\nimport CardHeader from './CardHeader';\nimport CardMeta from './CardMeta';\n/**\n * A card can contain blocks of content or extra content meant to be formatted separately from the main content.\n */\n\nfunction CardContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      description = props.description,\n      extra = props.extra,\n      header = props.header,\n      meta = props.meta,\n      textAlign = props.textAlign;\n  var classes = cx(useKeyOnly(extra, 'extra'), useTextAlignProp(textAlign), 'content', className);\n  var rest = getUnhandledProps(CardContent, props);\n  var ElementType = getElementType(CardContent, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createShorthand(CardHeader, function (val) {\n    return {\n      content: val\n    };\n  }, header, {\n    autoGenerateKey: false\n  }), createShorthand(CardMeta, function (val) {\n    return {\n      content: val\n    };\n  }, meta, {\n    autoGenerateKey: false\n  }), createShorthand(CardDescription, function (val) {\n    return {\n      content: val\n    };\n  }, description, {\n    autoGenerateKey: false\n  }));\n}\n\nCardContent.handledProps = [\"as\", \"children\", \"className\", \"content\", \"description\", \"extra\", \"header\", \"meta\", \"textAlign\"];\nCardContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for CardDescription. */\n  description: customPropTypes.itemShorthand,\n\n  /** A card can contain extra content meant to be formatted separately from the main content. */\n  extra: PropTypes.bool,\n\n  /** Shorthand for CardHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** Shorthand for CardMeta. */\n  meta: customPropTypes.itemShorthand,\n\n  /** A card content can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardContent;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport _map from \"lodash/map\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useWidthProp } from '../../lib';\nimport Card from './Card';\n/**\n * A group of cards.\n */\n\nfunction CardGroup(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      doubling = props.doubling,\n      items = props.items,\n      itemsPerRow = props.itemsPerRow,\n      stackable = props.stackable,\n      textAlign = props.textAlign;\n  var classes = cx('ui', useKeyOnly(centered, 'centered'), useKeyOnly(doubling, 'doubling'), useKeyOnly(stackable, 'stackable'), useTextAlignProp(textAlign), useWidthProp(itemsPerRow), 'cards', className);\n  var rest = getUnhandledProps(CardGroup, props);\n  var ElementType = getElementType(CardGroup, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  var itemsJSX = _map(items, function (item) {\n    var key = item.key || [item.header, item.description].join('-');\n    return React.createElement(Card, _extends({\n      key: key\n    }, item));\n  });\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), itemsJSX);\n}\n\nCardGroup.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"content\", \"doubling\", \"items\", \"itemsPerRow\", \"stackable\", \"textAlign\"];\nCardGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A group of cards can center itself inside its container. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A group of cards can double its column width for mobile. */\n  doubling: PropTypes.bool,\n\n  /** Shorthand array of props for Card. */\n  items: customPropTypes.collectionShorthand,\n\n  /** A group of cards can set how many cards should exist in a row. */\n  itemsPerRow: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A group of cards can automatically stack rows to a single columns on mobile devices. */\n  stackable: PropTypes.bool,\n\n  /** A card group can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardGroup;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\nimport Image from '../../elements/Image';\nimport CardContent from './CardContent';\nimport CardDescription from './CardDescription';\nimport CardGroup from './CardGroup';\nimport CardHeader from './CardHeader';\nimport CardMeta from './CardMeta';\n/**\n * A card displays site content in a manner similar to a playing card.\n */\n\nvar Card =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Card, _Component);\n\n  function Card() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Card);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Card)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function (e) {\n      var onClick = _this.props.onClick;\n      if (onClick) onClick(e, _this.props);\n    });\n\n    return _this;\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          centered = _this$props.centered,\n          children = _this$props.children,\n          className = _this$props.className,\n          color = _this$props.color,\n          content = _this$props.content,\n          description = _this$props.description,\n          extra = _this$props.extra,\n          fluid = _this$props.fluid,\n          header = _this$props.header,\n          href = _this$props.href,\n          image = _this$props.image,\n          link = _this$props.link,\n          meta = _this$props.meta,\n          onClick = _this$props.onClick,\n          raised = _this$props.raised;\n      var classes = cx('ui', color, useKeyOnly(centered, 'centered'), useKeyOnly(fluid, 'fluid'), useKeyOnly(link, 'link'), useKeyOnly(raised, 'raised'), 'card', className);\n      var rest = getUnhandledProps(Card, this.props);\n      var ElementType = getElementType(Card, this.props, function () {\n        if (onClick) return 'a';\n      });\n\n      if (!childrenUtils.isNil(children)) {\n        return React.createElement(ElementType, _extends({}, rest, {\n          className: classes,\n          href: href,\n          onClick: this.handleClick\n        }), children);\n      }\n\n      if (!childrenUtils.isNil(content)) {\n        return React.createElement(ElementType, _extends({}, rest, {\n          className: classes,\n          href: href,\n          onClick: this.handleClick\n        }), content);\n      }\n\n      return React.createElement(ElementType, _extends({}, rest, {\n        className: classes,\n        href: href,\n        onClick: this.handleClick\n      }), Image.create(image, {\n        autoGenerateKey: false,\n        defaultProps: {\n          ui: false,\n          wrapped: true\n        }\n      }), (description || header || meta) && React.createElement(CardContent, {\n        description: description,\n        header: header,\n        meta: meta\n      }), extra && React.createElement(CardContent, {\n        extra: true\n      }, extra));\n    }\n  }]);\n\n  return Card;\n}(Component);\n\n_defineProperty(Card, \"Content\", CardContent);\n\n_defineProperty(Card, \"Description\", CardDescription);\n\n_defineProperty(Card, \"Group\", CardGroup);\n\n_defineProperty(Card, \"Header\", CardHeader);\n\n_defineProperty(Card, \"Meta\", CardMeta);\n\n_defineProperty(Card, \"handledProps\", [\"as\", \"centered\", \"children\", \"className\", \"color\", \"content\", \"description\", \"extra\", \"fluid\", \"header\", \"href\", \"image\", \"link\", \"meta\", \"onClick\", \"raised\"]);\n\nexport { Card as default };\nCard.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A Card can center itself inside its container. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A Card can be formatted to display different colors. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for CardDescription. */\n  description: customPropTypes.itemShorthand,\n\n  /** Shorthand for primary content of CardContent. */\n  extra: customPropTypes.contentShorthand,\n\n  /** A Card can be formatted to take up the width of its container. */\n  fluid: PropTypes.bool,\n\n  /** Shorthand for CardHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** Render as an `a` tag instead of a `div` and adds the href attribute. */\n  href: PropTypes.string,\n\n  /** A card can contain an Image component. */\n  image: customPropTypes.itemShorthand,\n\n  /** A card can be formatted to link to other content. */\n  link: PropTypes.bool,\n\n  /** Shorthand for CardMeta. */\n  meta: customPropTypes.itemShorthand,\n\n  /**\n   * Called on click. When passed, the component renders as an `a`\n   * tag by default instead of a `div`.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClick: PropTypes.func,\n\n  /** A Card can be formatted to raise above the page. */\n  raised: PropTypes.bool\n} : {};","import React from 'react';\r\nimport { Card } from 'semantic-ui-react';\r\n\r\nconst SimpleCard = props => {\r\n    const { image, title, description } = props.data;\r\n\r\n    return <Card image={image} header={title && title} description={description && description} />;\r\n};\r\n\r\nexport default SimpleCard;\r\n"],"sourceRoot":""}